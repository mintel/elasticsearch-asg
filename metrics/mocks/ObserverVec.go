// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import prometheus "github.com/prometheus/client_golang/prometheus"

// ObserverVec is an autogenerated mock type for the ObserverVec type
type ObserverVec struct {
	mock.Mock
}

// Collect provides a mock function with given fields: _a0
func (_m *ObserverVec) Collect(_a0 chan<- prometheus.Metric) {
	_m.Called(_a0)
}

// CurryWith provides a mock function with given fields: _a0
func (_m *ObserverVec) CurryWith(_a0 prometheus.Labels) (prometheus.ObserverVec, error) {
	ret := _m.Called(_a0)

	var r0 prometheus.ObserverVec
	if rf, ok := ret.Get(0).(func(prometheus.Labels) prometheus.ObserverVec); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(prometheus.ObserverVec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(prometheus.Labels) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Describe provides a mock function with given fields: _a0
func (_m *ObserverVec) Describe(_a0 chan<- *prometheus.Desc) {
	_m.Called(_a0)
}

// GetMetricWith provides a mock function with given fields: _a0
func (_m *ObserverVec) GetMetricWith(_a0 prometheus.Labels) (prometheus.Observer, error) {
	ret := _m.Called(_a0)

	var r0 prometheus.Observer
	if rf, ok := ret.Get(0).(func(prometheus.Labels) prometheus.Observer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(prometheus.Observer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(prometheus.Labels) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetricWithLabelValues provides a mock function with given fields: lvs
func (_m *ObserverVec) GetMetricWithLabelValues(lvs ...string) (prometheus.Observer, error) {
	_va := make([]interface{}, len(lvs))
	for _i := range lvs {
		_va[_i] = lvs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 prometheus.Observer
	if rf, ok := ret.Get(0).(func(...string) prometheus.Observer); ok {
		r0 = rf(lvs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(prometheus.Observer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(lvs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MustCurryWith provides a mock function with given fields: _a0
func (_m *ObserverVec) MustCurryWith(_a0 prometheus.Labels) prometheus.ObserverVec {
	ret := _m.Called(_a0)

	var r0 prometheus.ObserverVec
	if rf, ok := ret.Get(0).(func(prometheus.Labels) prometheus.ObserverVec); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(prometheus.ObserverVec)
		}
	}

	return r0
}

// With provides a mock function with given fields: _a0
func (_m *ObserverVec) With(_a0 prometheus.Labels) prometheus.Observer {
	ret := _m.Called(_a0)

	var r0 prometheus.Observer
	if rf, ok := ret.Get(0).(func(prometheus.Labels) prometheus.Observer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(prometheus.Observer)
		}
	}

	return r0
}

// WithLabelValues provides a mock function with given fields: _a0
func (_m *ObserverVec) WithLabelValues(_a0 ...string) prometheus.Observer {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 prometheus.Observer
	if rf, ok := ret.Get(0).(func(...string) prometheus.Observer); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(prometheus.Observer)
		}
	}

	return r0
}
